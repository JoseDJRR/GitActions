name: Get Variables

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
jobs:
  get-variables:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      GIT_COMMIT_SHORT: ${{ steps.get_hash.outputs.git_commit_short }}
      PROJECT_NAME: ${{ steps.get_project.outputs.project_name }}
      DEPENDABOT_PROJECT: ${{ steps.get_dependabot.outputs.dependabot_project }}
      LAMBDA_NAME: ${{ steps.get_image.outputs.LAMBDA_NAME }}
      GIT_BRANCH_STANDARD: ${{ steps.get_branch_standard.outputs.GIT_BRANCH_STANDARD }}
      TEMPLATE_FILE: ${{ steps.get_template_file.outputs.TEMPLATE_FILE }}
      TEAM_NAME: ${{ steps.get_team_name.outputs.TEAM_NAME }}
    steps:
      - uses: actions/checkout@v3
      - id: get_hash
        run: echo "GIT_COMMIT_SHORT=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_OUTPUT
      - id: get_project
        run: echo "PROJECT_NAME=`echo ${GITHUB_REPOSITORY} | cut -c 10-`" >> $GITHUB_OUTPUT
      - id: get_dependabot
        run: echo "DEPENDABOT_PROJECT=`echo ${GITHUB_REPOSITORY} | cut -c 10-`" >> $GITHUB_OUTPUT
      - id: get_image
        run: echo "LAMBDA_NAME=`printf $(grep LAMBDA_NAME deployment.env | xargs)`" >> $GITHUB_OUTPUT
      - id: get_branch_standard
        run: echo "GIT_BRANCH_STANDARD=`echo ${GITHUB_REF#refs/heads/} | tr / -`" >> $GITHUB_OUTPUT
      - id: get_template_file
        run: echo "TEMPLATE_FILE=`$(echo find . -maxdepth 1 -name template.y*)`" >> $GITHUB_OUTPUT
      - id: get_team_name
        run: echo "TEAM_NAME=`printf $(grep TEAM_NAME deployment.env | xargs)`" >> $GITHUB_OUTPUT
      - name: Checking based Lambda
        run: |
          (cat template.yaml | grep nodejs) >> result.txt
        shell: bash
  show_variables:
    runs-on: ubuntu-latest
    needs: get-variables
    steps:
      - run: echo ${{needs.get-variables.outputs.GIT_COMMIT_SHORT}}
      - run: echo ${{needs.get-variables.outputs.PROJECT_NAME}} 
      - run: echo ${{needs.get-variables.outputs.DEPENDABOT_PROJECT}}
      - run: echo ${{needs.get-variables.outputs.LAMBDA_NAME}}
      - run: echo ${{needs.get-variables.outputs.GIT_BRANCH_STANDARD}}
      - run: echo ${{needs.get-variables.outputs.TEMPLATE_FILE}}
      - run: echo ${{needs.get-variables.outputs.TEAM_NAME}}
#  integration-cd:
#    runs-on: ubuntu-latest
#    needs: [get-variables]
#    steps:
#      - name: Deploy fase
#        run: aws --region us-west-2 lambda invoke --function-name dev-ecs-feature-branch-temp --payload '{ "project":"${{needs.get-variables.outputs.project_name}} ", "branch":"${{needs.get-variables.outputs.GIT_BRANCH_STANDARD}}", "commit":"${{needs.get-variables.outputs.git_commit_short}}"}' responde.json

                        
